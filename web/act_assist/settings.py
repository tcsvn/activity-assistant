"""
Django settings for hassbrain_web project.

Generated by 'django-admin startproject' using Django 2.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import logging
logger = logging.getLogger(__name__)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

#ALLOWED_HOSTS = ['0.0.0.0', 'localhost']

# allow hosts for the home net
#ALLOWED_HOSTS += ['192.168.178.{}'.format(j) for j in range(256)]
ALLOWED_HOSTS = ['*'] # TODO debug measure

# Allow to use dash application in the same HTML document
X_FRAME_OPTIONS='SAMEORIGIN'

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'qr_code',
    'rest_framework.authtoken',
    'django_plotly_dash.apps.DjangoPlotlyDashConfig',
    'frontend.apps.FrontendConfig',
    'backend.apps.BackendConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django_plotly_dash.middleware.BaseMiddleware',
    'django_plotly_dash.middleware.ExternalRedirectionMiddleware',
]

ROOT_URLCONF = 'act_assist.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'act_assist.wsgi.application'


PLOTLY_DASH = {
    "ws_route" : "ws/channel",

    "insert_demo_migrations" : True,  # Insert model instances used by the demo

    "http_poke_enabled" : True, # Flag controlling availability of direct-to-messaging http endpoint

    "view_decorator" : None, # Specify a function to be used to wrap each of the dpd view functions

    "cache_arguments" : True, # True for cache, False for session-based argument propagation

    #"serve_locally" : True, # True to serve assets locally, False to use their unadulterated urls (eg a CDN)

    #"stateless_loader" : "demo.scaffold.stateless_app_loader",
}

# Staticfiles finders for locating dash app assets and related files

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',

    'django_plotly_dash.finders.DashAssetFinder',
    'django_plotly_dash.finders.DashComponentFinder',
    #'django_plotly_dash.finders.DashAppDirectoryFinder',
]

# Plotly components containing static content that should
# be handled by the Django staticfiles infrastructure

PLOTLY_COMPONENTS = [
    'dash_core_components',
    'dash_html_components',
    #'dash_renderer',
    #'dash_bootstrap_components',
    #'dpd_components',
    #'dpd_static_support',
]

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

# every use is corrected by using own methods e.g current_time in frontend.util
TIME_ZONE = 'UTC'
USE_TZ = False

USE_I18N = True

USE_L10N = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
STATIC_URL = '/static/'

SERVE_MEDIA = True
MEDIA_URL = '/media/'

# The rest api can be called within supervisor
HASS_API_URL = 'http://supervisor/core/api'
HASS_SUP_URL = 'http://supervisor'

DATA_ROOT = '/data/'
MEDIA_ROOT = DATA_ROOT + 'media/'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': DATA_ROOT + 'db.sqlite3',
    }
}

# REST API
REST_API_URL='api'
REST_API_TITLE='Activity-assistant API'

# experiment
POLL_INTERVAL_LST = ['5s', '1m', '10m', '30m', '2h', '6h']
DATASET_PATH = DATA_ROOT + 'datasets/' # path where all the datasets lie
ACTIVITY_FILE_NAME="activities_subject_%s.csv"
ACTIVITY_MAPPING_FILE_NAME="activity_map.csv"
DATA_FILE_NAME='devices.csv'
DATA_MAPPING_FILE_NAME='device_map.csv'
PRIOR_ACTIVITY_FILE_NAME = "prior_activities_subject_%s.csv"
DEVICE_AREA_MAP_FN = "device_area_map.csv"
ACTIVITY_AREA_MAP_FN = "activity_area_map.csv"

HASS_CONFIG_URL = '/config/configuration.yaml'

ACT_ASSIST_VERSION = "v0.0.1-alpha"
ACT_ASSIST_RELEASE_LINK = "https://github.com/tcsvn/activity-assistant-logger/releases/download/{}/activity-assistant.apk".format(ACT_ASSIST_VERSION)

# API URLS
URL_SERVER = r'server'
URL_DEVICE_PREDICTIONS = r'devicepredictions'
URL_ACTIVITY_PREDICTIONS = r'activitypredictions'
URL_PERSONS = r'/person/'
URL_SYNTHETIC_ACTIVITY = r'syntheticactivity'
URL_DEVICE_COMPONENT = r'devcomp'

# plot filenames
PLOT_ACT_HIST_COUNTS_FN = 'hist_counts.png'
PLOT_ACT_BP_DURATION_FN = 'boxplot_duration.png'
PLOT_ACT_CUM_DUR_FN = 'hist_cum_duration.png'
PLOT_ACT_HM_TRANS_FN = 'heatmap_transitions.png'
PLOT_ACT_RIDGE_FN = 'ridge_line.png'

PLOT_DEV_HIST_TRIG_TIME_FN = 'hist_trigger_time_diff.png'
PLOT_DEV_HM_TRIG_TIME_FN = 'heatmap_trigger_time.png'
PLOT_DEV_HM_TRIG_ONE_DAY_FN = 'heatmap_trigger_one_day.png'
PLOT_DEV_HIST_COUNTS_FN = 'hist_counts.png'
PLOT_DEV_BP_ON_DUR_FN = 'boxplot_on_duration.png'
PLOT_DEV_HIST_ON_OFF_FN = 'hist_on_off.png'
PLOT_DEV_HM_CROSS_CORR_FN = 'heatmap_cross_corr.png'

# qrcode cache
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    },
    'qr-code': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'qr-code-cache',
        'TIMEOUT': 3600
    }
}

QR_CODE_CACHE_ALIAS = 'qr-code'


from os import environ
ENV_SETTINGS = environ.get('DJANGO_ENV') or 'development'
if ENV_SETTINGS == 'development':
    try:
        from act_assist.local_settings.development import *
    except ImportError:
        logger.error('couldn\'t import development settings')
        raise

elif ENV_SETTINGS == 'production':
    try:
        from local_settings.production import *
    except ImportError:
        logger.error('couldn\'t import production settings')
        raise
